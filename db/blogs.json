{
    "blog001": {
        "title": "Let's do the thing!",
        "Date": "December 14, 2018",
        "entry": "I've gone back and forth on how I intend to structure my personal portfolio site, and have finally settled on a blog format for my main content. This will be mostly for my own benefit, as these weekly or bi-weekly check-ins should provide a opportunity for personal reflection as I learn more about software development. <br/><br/> Right now I am wrapping up week 18 (has it already been 18 weeks!!??) of the Part-Time Web Developer Bootcamp at Nashville Software School. The subject material for this week is pretty much what my entire cohort has been waiting for: REACT. And I can confidently say that so far React is exactly what we expected it to be. Alien, confusing, but also very exciting! That is one of the things (and there are many!) that has been so great about NSS so far. As soon as we start to get comfortable with one method of doing something, it's time learn something else that changes our entire world. Such is the life of a programmer, so I've been told. <br/><br/> This weekend I'm going to spend some time reading up on the React documentation, and also try to get a head start on our current homework assignment."
    },
    "blog002": {
        "title": "Winter break",
        "Date": "January 3, 2019",
        "entry": "I wanted to use this time away from class to fully immerse myself in React, and consume as much learning materials as possible. I started with reading the <a href='https://reactjs.org/docs/hello-world.html' target='_blank'>offical documentation</a>, and then I read this insightful <a target='_blank' href='https://medium.freecodecamp.org/all-the-fundamental-react-js-concepts-jammed-into-this-single-medium-article-c83f9b53eac2'>piece</a> about the fundamentals of React by Samer Buna which helped to reinforce what we learned in class as well as what was in the official docs. After that I immediately started coding along with the <a target='_blank' href='https://reactforbeginners.com/'>React For Beginners</a> course by Wes Bos. Wes is just a fantastic personality. Easy to understand, easy to follow, and he makes it a fun experience. But the realest of 'Aha!' moments came during my time asking questions and getting advice from Adam Oswalt, aka: Common Table Adam. Adam is a veritable wizard. He is super helpful, and he possesses all the patience of a glacier. His knowledge is comprehensive. In particular, he helped me to really understand where to mess with state and why, and also gave me a high level introduction to the concept of object immutability. <br/><br/> So now after all that, I have successfully coded my first app in React, and I couldn't be happier! Also the timing is perfect with class starting back up in just a matter of days. And since Zoe has approved my front-end capstone proposal, I am chomping at the bit to get started! My project will be utilizing the Google Maps API. We'll see how that goes..."
    },
    "blog003": {
        "title": "Capstone",
        "Date": "February 14, 2019",
        "entry": "My front-end capstone is done!! I hit my mvp within the timeframe I alotted myself, and have been working on stretch goals for the last week or so. There is quite a lot I could say about the entire process, but here are a few quick thoughts on what I learned: <ol><li>Not all depencies play nice with each other! Some require a little finesse to get working the way you would think they should work.</li><li>Leaflet makes a very cool map component, and is surprisingly not all that difficult to figure out. And the react-leaflet wrapper makes it even easier. Most issues I had could be easily resolved by referring to the documentation, or by watching any of the many videos and tutorials that are available for Leaflet.</li><li>I need to be extra careful with scoping my loops when making API calls. I made some comical errors in this regard.</li><li>CSS is hard. Needless so, I would argue. Definitely a weak spot for me.</li><li>Always read the documentation! Before implementing any new technology, read the entire documentation. And then read it again.</li></ol>"
    },
    "blog004": {
        "title": "I am feeling very object-oriented today",
        "Date": "March 1, 2019",
        "entry": "In class the other day, our instructor asked us if we knew what the difference is between a method and a function. The answer can be a bit complicated. We agreed that all methods are functions, but not all functions are methods. But it also depends heavily on context. In this case we are considering methods to be privately accessed methods directly associated with a class. And functions, for the sake of this example, would be publically accessed methods that are not unique to a specific class. <br/><br/> Makes sense. <br/><br/> I was curious, so I did some further research on this very topic the next day, and here is how I now understand it: <br/><br/> Consider Mortal Kombat, the popular fighting video game from the early 90's. In Mortal Kombat the player can choose one of seven different playable characters to be their fighter. Let us consider each of these characters to be its own class. So we would have class Sub-Zero, class Scorpion, class Johnny Cage, etc. All of the characters in the game have access to public functions that they would inherit from a parent class of 'fighter': punch, kick, duck, jump, move forward, move backward, etc. And because Midway did not want to make a boring video game, each character comes with their own unique special moves. We can think of these special moves as private methods. Scorpion's harpoon 'get over here' special move, and Sub-Zero's freezing ability are both examples of private methods accessible only by its respective class. Johnny Cage cannot call Sub-Zero's method to freeze people, and Sub-Zero cannot call Scorpion's 'get over here' harpoon ability. Likewise, if you have successfully entered the blood code (ABACABB, anyone?), you will then have access within the game to perform one of the gratuitously violent, yet also hilarious, fatality moves. Each character comes with their own fatality finisher. These can also be considered to be private methods. <br/><br/> This is just a basic example, but already I am starting to see how these principles apply in OOP."
    },
    "blog005": {
        "title": "C# is weird",
        "Date": "March 24, 2019",
        "entry": "Coding in C# feels like swimming in the deep-end of the swimming pool. Just browsing through the many methods on the many data types in C# can be overwhelming. Microsoft has really made a mess out of all of their various libraries. On the plus side, I can certainly see the progress I am making, and that is exciting. The hardest part is knowing what methods are available to you at certain times, and that just takes some practice. A LOT of practice. At least I'm getting much better at debugging!"
    },
    "blog006": {
        "title": "C# is totally not weird!",
        "Date": "April 24, 2019",
        "entry": "After just a few weeks of working with the syntax, it's not so much different from what we were doing with vanilla JavaScript. I've actually been amazed at all the new toys we get to play with. There is a lot here to unpack and explore, but you quickly gravitate to the methods and datatypes that are most useful to you. Lists or Dictionaries over Arrays. Decimals, floats, ints instead of numbers. And then there is Linq! While I think it is true that programming languages will teach you to not want what you don't have access to, I can certainly see the value in having been exposed to a wider set of tools. So I can honestly say I'm enjoying it. Going forward I hope to become more comfortable with all the tricks so that my workflow can become more optimized. My only gripe is that Visual Studio and SQL Server Management Studio feel too much like Windows! Perhaps I shall look into the various offerings from JetBrains."
    }
}